// Generated by Haxe 4.2.0
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Math.__name__ = true;
var SnekkyDecompiler = $hx_exports["SnekkyDecompiler"] = function() { };
SnekkyDecompiler.__name__ = true;
SnekkyDecompiler.decompileBytes = function(code) {
	var decompiler = new decompiler_Decompiler(code);
	decompiler.decompile();
	return decompiler.decompileToString();
};
SnekkyDecompiler.main = function() {
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ast_Node = function() { };
ast_Node.__name__ = true;
ast_Node.prototype = {
	toString: function() {
		return "// Not implemented";
	}
	,__class__: ast_Node
};
var ast_BlockNode = function(parent) {
	this.indentWidth = 0;
	this.body = [];
	this.parent = parent;
	if(parent != null) {
		this.indentWidth = parent.indentWidth + 1;
	}
};
ast_BlockNode.__name__ = true;
ast_BlockNode.__super__ = ast_Node;
ast_BlockNode.prototype = $extend(ast_Node.prototype,{
	addNode: function(node) {
		this.body.push(node);
	}
	,repeatString: function(r,s) {
		var _g = [];
		var _g1 = 0;
		var _g2 = r;
		while(_g1 < _g2) {
			var _ = _g1++;
			_g.push(s);
		}
		return _g.join("");
	}
	,toString: function() {
		var s_b = "";
		if(this.indentWidth > 0) {
			s_b += "{\r\n";
		}
		var _g = 0;
		var _g1 = this.body;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			s_b += Std.string(this.repeatString(this.indentWidth,"    "));
			s_b += Std.string(node.toString());
			s_b += "\r\n";
		}
		s_b += Std.string(this.repeatString(this.indentWidth - 1,"    "));
		if(this.indentWidth > 0) {
			s_b += "}";
		}
		return s_b;
	}
	,__class__: ast_BlockNode
});
var ast_BreakNode = function() {
};
ast_BreakNode.__name__ = true;
ast_BreakNode.__super__ = ast_Node;
ast_BreakNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "break;";
	}
	,__class__: ast_BreakNode
});
var ast_CallNode = function(target,parameters) {
	this.target = target;
	this.parameters = parameters;
};
ast_CallNode.__name__ = true;
ast_CallNode.__super__ = ast_Node;
ast_CallNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += Std.string("" + Std.string(this.target) + "(");
		var iterator_current = 0;
		var iterator_array = this.parameters;
		while(iterator_current < iterator_array.length) {
			var p = iterator_array[iterator_current++];
			s_b += Std.string(p.toString());
			if(iterator_current < iterator_array.length) {
				s_b += ", ";
			}
		}
		s_b += ")";
		return s_b;
	}
	,__class__: ast_CallNode
});
var ast_ContinueNode = function() {
};
ast_ContinueNode.__name__ = true;
ast_ContinueNode.__super__ = ast_Node;
ast_ContinueNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "continue;";
	}
	,__class__: ast_ContinueNode
});
var ast_IdentNode = function(name) {
	this.name = name;
};
ast_IdentNode.__name__ = true;
ast_IdentNode.__super__ = ast_Node;
ast_IdentNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return this.name;
	}
	,__class__: ast_IdentNode
});
var ast_IfNode = function(condition,consequence,alternative) {
	this.condition = condition;
	this.consequence = consequence;
	this.alternative = alternative;
};
ast_IfNode.__name__ = true;
ast_IfNode.__super__ = ast_Node;
ast_IfNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += Std.string("if " + Std.string(this.condition) + " ");
		s_b += Std.string(this.consequence.toString());
		if(this.alternative.body.length > 0) {
			s_b += " else ";
			s_b += Std.string(this.alternative.toString());
		}
		return s_b;
	}
	,__class__: ast_IfNode
});
var ast_ImportNode = function(path) {
	this.path = path;
};
ast_ImportNode.__name__ = true;
ast_ImportNode.__super__ = ast_Node;
ast_ImportNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "import \"" + this.path + "\";\r\n";
	}
	,__class__: ast_ImportNode
});
var ast_IndexAssignNode = function(target,index,value) {
	this.target = target;
	this.index = index;
	this.value = value;
};
ast_IndexAssignNode.__name__ = true;
ast_IndexAssignNode.__super__ = ast_Node;
ast_IndexAssignNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		if(((this.index) instanceof ast_datatypes_StringNode)) {
			var cIndex = (js_Boot.__cast(this.index , ast_datatypes_StringNode)).value;
			if(!code_Keyword.isKeyword(cIndex) && new EReg("^[a-zA-Z]+$","").match(cIndex)) {
				return "" + Std.string(this.target) + "." + cIndex + " = " + Std.string(this.value) + ";\r\n";
			}
		}
		return "" + Std.string(this.target) + "[" + Std.string(this.index) + "] = " + Std.string(this.value) + ";\r\n";
	}
	,__class__: ast_IndexAssignNode
});
var ast_IndexNode = function(target,index) {
	this.target = target;
	this.index = index;
};
ast_IndexNode.__name__ = true;
ast_IndexNode.__super__ = ast_Node;
ast_IndexNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		if(((this.index) instanceof ast_datatypes_StringNode)) {
			var cIndex = (js_Boot.__cast(this.index , ast_datatypes_StringNode)).value;
			if(!code_Keyword.isKeyword(cIndex) && new EReg("^[a-zA-Z]+$","").match(cIndex)) {
				return "" + Std.string(this.target) + "." + cIndex;
			}
		}
		return "" + Std.string(this.target) + "[" + Std.string(this.index) + "]";
	}
	,__class__: ast_IndexNode
});
var ast_ReturnNode = function(returnValue) {
	this.returnValue = returnValue;
};
ast_ReturnNode.__name__ = true;
ast_ReturnNode.__super__ = ast_Node;
ast_ReturnNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += "return";
		if(this.returnValue != null) {
			s_b += Std.string(" " + Std.string(this.returnValue) + ";");
		} else {
			s_b += ";";
		}
		return s_b;
	}
	,__class__: ast_ReturnNode
});
var ast_StatementNode = function(expression) {
	this.expression = expression;
};
ast_StatementNode.__name__ = true;
ast_StatementNode.__super__ = ast_Node;
ast_StatementNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "" + Std.string(this.expression) + ";";
	}
	,__class__: ast_StatementNode
});
var ast_VariableAssignNode = function(name,value) {
	this.name = name;
	this.value = value;
};
ast_VariableAssignNode.__name__ = true;
ast_VariableAssignNode.__super__ = ast_Node;
ast_VariableAssignNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "" + this.name + " = " + Std.string(this.value) + ";\r\n";
	}
	,__class__: ast_VariableAssignNode
});
var ast_VariableNode = function(name,value) {
	this.name = name;
	this.value = value;
};
ast_VariableNode.__name__ = true;
ast_VariableNode.__super__ = ast_Node;
ast_VariableNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "mut " + this.name + " = " + Std.string(this.value) + ";\r\n";
	}
	,__class__: ast_VariableNode
});
var ast_WhileNode = function(condition,body) {
	this.condition = condition;
	this.body = body;
};
ast_WhileNode.__name__ = true;
ast_WhileNode.__super__ = ast_Node;
ast_WhileNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += Std.string("while " + Std.string(this.condition) + " ");
		s_b += Std.string(this.body.toString());
		return s_b;
	}
	,__class__: ast_WhileNode
});
var ast_datatypes_ArrayNode = function(values) {
	this.values = [];
	this.values = values;
};
ast_datatypes_ArrayNode.__name__ = true;
ast_datatypes_ArrayNode.__super__ = ast_Node;
ast_datatypes_ArrayNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += "[";
		var iterator_current = 0;
		var iterator_array = this.values;
		while(iterator_current < iterator_array.length) {
			var v = iterator_array[iterator_current++];
			s_b += Std.string(v.toString());
			if(iterator_current < iterator_array.length) {
				s_b += ", ";
			}
		}
		s_b += "]";
		return s_b;
	}
	,__class__: ast_datatypes_ArrayNode
});
var ast_datatypes_BooleanNode = function(value) {
	this.value = value;
};
ast_datatypes_BooleanNode.__name__ = true;
ast_datatypes_BooleanNode.__super__ = ast_Node;
ast_datatypes_BooleanNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return Std.string(this.value);
	}
	,__class__: ast_datatypes_BooleanNode
});
var ast_datatypes_FunctionNode = function(body,parameters) {
	this.body = body;
	this.parameters = parameters;
};
ast_datatypes_FunctionNode.__name__ = true;
ast_datatypes_FunctionNode.__super__ = ast_Node;
ast_datatypes_FunctionNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += "func(";
		var iterator_current = 0;
		var iterator_array = this.parameters;
		while(iterator_current < iterator_array.length) {
			var p = iterator_array[iterator_current++];
			s_b += Std.string(p.toString());
			if(iterator_current < iterator_array.length) {
				s_b += ", ";
			}
		}
		s_b += ") ";
		s_b += Std.string(this.body.toString());
		return s_b;
	}
	,__class__: ast_datatypes_FunctionNode
});
var ast_datatypes_HashNode = function(values) {
	this.values = values;
};
ast_datatypes_HashNode.__name__ = true;
ast_datatypes_HashNode.__super__ = ast_Node;
ast_datatypes_HashNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		var s_b = "";
		s_b += "{";
		var map = this.values;
		var iterator_map = map;
		var iterator_keys = map.keys();
		while(iterator_keys.hasNext()) {
			var key = iterator_keys.next();
			var _g1_value = iterator_map.get(key);
			var _g1_key = key;
			var k = _g1_key;
			var v = _g1_value;
			var key1 = js_Boot.__cast(k , ast_datatypes_StringNode);
			if(new EReg("^[a-zA-Z]+$","").match(key1.value) && !code_Keyword.isKeyword(key1.value)) {
				s_b += Std.string(key1.value);
			} else {
				s_b += Std.string(k.toString());
			}
			s_b += ": ";
			s_b += Std.string(v.toString());
			if(iterator_keys.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: ast_datatypes_HashNode
});
var ast_datatypes_NullNode = function() {
};
ast_datatypes_NullNode.__name__ = true;
ast_datatypes_NullNode.__super__ = ast_Node;
ast_datatypes_NullNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "null";
	}
	,__class__: ast_datatypes_NullNode
});
var ast_datatypes_NumberNode = function(value) {
	this.value = value;
};
ast_datatypes_NumberNode.__name__ = true;
ast_datatypes_NumberNode.__super__ = ast_Node;
ast_datatypes_NumberNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return Std.string(this.value);
	}
	,__class__: ast_datatypes_NumberNode
});
var ast_datatypes_StringNode = function(value) {
	this.value = this.escape(value);
};
ast_datatypes_StringNode.__name__ = true;
ast_datatypes_StringNode.__super__ = ast_Node;
ast_datatypes_StringNode.prototype = $extend(ast_Node.prototype,{
	escape: function(s) {
		return StringTools.replace(s,"\"","\\\"");
	}
	,toString: function() {
		return "\"" + this.value + "\"";
	}
	,__class__: ast_datatypes_StringNode
});
var ast_operators_AddNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_AddNode.__name__ = true;
ast_operators_AddNode.__super__ = ast_Node;
ast_operators_AddNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " + " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_AddNode
});
var ast_operators_AndNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_AndNode.__name__ = true;
ast_operators_AndNode.__super__ = ast_Node;
ast_operators_AndNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " && " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_AndNode
});
var ast_operators_BitAndNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_BitAndNode.__name__ = true;
ast_operators_BitAndNode.__super__ = ast_Node;
ast_operators_BitAndNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " & " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_BitAndNode
});
var ast_operators_BitNotNode = function(right) {
	this.right = right;
};
ast_operators_BitNotNode.__name__ = true;
ast_operators_BitNotNode.__super__ = ast_Node;
ast_operators_BitNotNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(~" + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_BitNotNode
});
var ast_operators_BitOrNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_BitOrNode.__name__ = true;
ast_operators_BitOrNode.__super__ = ast_Node;
ast_operators_BitOrNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " | " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_BitOrNode
});
var ast_operators_BitShiftLeftNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_BitShiftLeftNode.__name__ = true;
ast_operators_BitShiftLeftNode.__super__ = ast_Node;
ast_operators_BitShiftLeftNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " << " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_BitShiftLeftNode
});
var ast_operators_BitShiftRightNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_BitShiftRightNode.__name__ = true;
ast_operators_BitShiftRightNode.__super__ = ast_Node;
ast_operators_BitShiftRightNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " >> " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_BitShiftRightNode
});
var ast_operators_BitXorNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_BitXorNode.__name__ = true;
ast_operators_BitXorNode.__super__ = ast_Node;
ast_operators_BitXorNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " ^ " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_BitXorNode
});
var ast_operators_ConcatStringNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_ConcatStringNode.__name__ = true;
ast_operators_ConcatStringNode.__super__ = ast_Node;
ast_operators_ConcatStringNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " >< " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_ConcatStringNode
});
var ast_operators_DivideNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_DivideNode.__name__ = true;
ast_operators_DivideNode.__super__ = ast_Node;
ast_operators_DivideNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " / " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_DivideNode
});
var ast_operators_EqualsNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_EqualsNode.__name__ = true;
ast_operators_EqualsNode.__super__ = ast_Node;
ast_operators_EqualsNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " == " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_EqualsNode
});
var ast_operators_GreaterThanNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_GreaterThanNode.__name__ = true;
ast_operators_GreaterThanNode.__super__ = ast_Node;
ast_operators_GreaterThanNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " > " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_GreaterThanNode
});
var ast_operators_GreaterThanOrEqualNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_GreaterThanOrEqualNode.__name__ = true;
ast_operators_GreaterThanOrEqualNode.__super__ = ast_Node;
ast_operators_GreaterThanOrEqualNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " >= " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_GreaterThanOrEqualNode
});
var ast_operators_LessThanNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_LessThanNode.__name__ = true;
ast_operators_LessThanNode.__super__ = ast_Node;
ast_operators_LessThanNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " < " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_LessThanNode
});
var ast_operators_LessThanOrEqualNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_LessThanOrEqualNode.__name__ = true;
ast_operators_LessThanOrEqualNode.__super__ = ast_Node;
ast_operators_LessThanOrEqualNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " <= " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_LessThanOrEqualNode
});
var ast_operators_ModuloNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_ModuloNode.__name__ = true;
ast_operators_ModuloNode.__super__ = ast_Node;
ast_operators_ModuloNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " % " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_ModuloNode
});
var ast_operators_MultiplyNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_MultiplyNode.__name__ = true;
ast_operators_MultiplyNode.__super__ = ast_Node;
ast_operators_MultiplyNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " * " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_MultiplyNode
});
var ast_operators_NegateNode = function(right) {
	this.right = right;
};
ast_operators_NegateNode.__name__ = true;
ast_operators_NegateNode.__super__ = ast_Node;
ast_operators_NegateNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(-" + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_NegateNode
});
var ast_operators_NotNode = function(right) {
	this.right = right;
};
ast_operators_NotNode.__name__ = true;
ast_operators_NotNode.__super__ = ast_Node;
ast_operators_NotNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(!" + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_NotNode
});
var ast_operators_OrNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_OrNode.__name__ = true;
ast_operators_OrNode.__super__ = ast_Node;
ast_operators_OrNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " || " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_OrNode
});
var ast_operators_SubtractNode = function(left,right) {
	this.left = left;
	this.right = right;
};
ast_operators_SubtractNode.__name__ = true;
ast_operators_SubtractNode.__super__ = ast_Node;
ast_operators_SubtractNode.prototype = $extend(ast_Node.prototype,{
	toString: function() {
		return "(" + Std.string(this.left) + " - " + Std.string(this.right) + ")";
	}
	,__class__: ast_operators_SubtractNode
});
var code_Keyword = function() { };
code_Keyword.__name__ = true;
code_Keyword.isKeyword = function(s) {
	return code_Keyword.keywords.indexOf(s) != -1;
};
var code_OpCode = function() { };
code_OpCode.__name__ = true;
var constant_ConstantPool = function() { };
constant_ConstantPool.__name__ = true;
constant_ConstantPool.fromByteCode = function(byteCode) {
	var pool = [];
	var poolSize = byteCode.readInt32();
	var startPosition = byteCode.pos;
	while(byteCode.pos < startPosition + poolSize) {
		var type = byteCode.readByte();
		switch(type) {
		case 0:
			var value = byteCode.readDouble();
			pool.push(object_Object.Number(value));
			break;
		case 1:
			var length = byteCode.readInt32();
			var value1 = byteCode.readString(length);
			pool.push(object_Object.String(value1));
			break;
		case 2:
			var position = byteCode.readInt32();
			var parametersCount = byteCode.readInt16();
			pool.push(object_Object.Function(position,parametersCount));
			break;
		case 3:
			pool.push(object_Object.Null);
			break;
		case 4:
			var value2 = byteCode.readByte();
			pool.push(object_Object.Boolean(value2 != 0));
			break;
		default:
		}
	}
	return pool;
};
var constant_ConstantType = function() { };
constant_ConstantType.__name__ = true;
var debug_FileNameTable = function() {
	this.table = [];
};
debug_FileNameTable.__name__ = true;
debug_FileNameTable.prototype = {
	define: function(start,end,fileName) {
		this.table.push({ start : start, end : end, fileName : fileName});
	}
	,resolve: function(byteIndex) {
		var prev = null;
		var _g = 0;
		var _g1 = this.table;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.start <= byteIndex && entry.end >= byteIndex) {
				if(prev == null) {
					prev = entry;
					continue;
				}
				if(entry.start >= prev.start && entry.end <= prev.end) {
					prev = entry;
				}
			}
		}
		if(prev == null) {
			return null;
		} else {
			return prev.fileName;
		}
	}
	,fromByteCode: function(byteCode) {
		var tableSize = byteCode.readInt32();
		var startPosition = byteCode.pos;
		while(byteCode.pos < startPosition + tableSize) {
			var start = byteCode.readInt32();
			var end = byteCode.readInt32();
			var fileNameLength = byteCode.readInt32();
			var fileName = byteCode.readString(fileNameLength);
			this.table.push({ start : start, end : end, fileName : fileName});
		}
		return this;
	}
	,__class__: debug_FileNameTable
};
var debug_LineNumberTable = function() {
	this.table = new haxe_ds_IntMap();
};
debug_LineNumberTable.__name__ = true;
debug_LineNumberTable.prototype = {
	define: function(byteIndex,sourcePosition) {
		this.table.h[byteIndex] = sourcePosition;
	}
	,resolve: function(byteIndex) {
		if(byteIndex < 0) {
			return null;
		}
		var position = this.table.h[byteIndex];
		if(position != null) {
			return position;
		} else {
			return this.resolve(byteIndex - 1);
		}
	}
	,fromByteCode: function(byteCode) {
		var tableSize = byteCode.readInt32();
		var startPosition = byteCode.pos;
		while(byteCode.pos < startPosition + tableSize) {
			var byteIndex = byteCode.readInt32();
			var line = byteCode.readInt32();
			var linePos = byteCode.readInt32();
			this.table.h[byteIndex] = { line : line, linePos : linePos};
		}
		return this;
	}
	,__class__: debug_LineNumberTable
};
var debug_VariableTable = function() {
	this.table = [];
};
debug_VariableTable.__name__ = true;
debug_VariableTable.prototype = {
	define: function(index,start,end,name) {
		this.table.push({ index : index, start : start, end : end, name : name});
	}
	,resolveVariableName: function(index) {
		var _g = 0;
		var _g1 = this.table;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.index == index) {
				return entry.name;
			}
		}
		return "$" + ("var" + index);
	}
	,toByteCode: function() {
		var tableBytes = new haxe_io_BytesOutput();
		var _g = 0;
		var _g1 = this.table;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			tableBytes.writeInt32(entry.index);
			tableBytes.writeInt32(entry.start);
			tableBytes.writeInt32(entry.end);
			tableBytes.writeInt32(haxe_io_Bytes.ofString(entry.name).length);
			tableBytes.writeString(entry.name);
		}
		var output = new haxe_io_BytesOutput();
		output.writeInt32(tableBytes.b.pos);
		output.write(tableBytes.getBytes());
		return output.getBytes();
	}
	,fromByteCode: function(byteCode) {
		var tableSize = byteCode.readInt32();
		var startPosition = byteCode.pos;
		while(byteCode.pos < startPosition + tableSize) {
			var index = byteCode.readInt32();
			var start = byteCode.readInt32();
			var end = byteCode.readInt32();
			var nameLength = byteCode.readInt32();
			var name = byteCode.readString(nameLength);
			this.table.push({ index : index, start : start, end : end, name : name});
		}
		return this;
	}
	,__class__: debug_VariableTable
};
var decompiler_Decompiler = function(fileData) {
	this.declaredVariables = [];
	this.functions = new haxe_ds_IntMap();
	this.stack = new haxe_ds_GenericStack();
	this.pc = 0;
	this.blocks = new haxe_ds_StringMap();
	this.fileInfo = [];
	this.variableNames = [];
	var fileData1 = new haxe_io_BytesInput(fileData);
	var byteCode = fileData1.readByte() == 1 ? new haxe_io_BytesInput(haxe_zip_Uncompress.run(fileData1.readAll())) : new haxe_io_BytesInput(fileData1.readAll());
	this.fileNameTable = new debug_FileNameTable().fromByteCode(byteCode);
	this.lineNumberTable = new debug_LineNumberTable().fromByteCode(byteCode);
	this.variableTable = new debug_VariableTable().fromByteCode(byteCode);
	this.constantPool = constant_ConstantPool.fromByteCode(byteCode);
	this.instructions = byteCode.read(byteCode.readInt32());
};
decompiler_Decompiler.__name__ = true;
decompiler_Decompiler.prototype = {
	decompile: function() {
		var lastFileName = this.fileNameTable.resolve(this.pc);
		while(this.pc < this.instructions.length) {
			var fileName = this.fileNameTable.resolve(this.pc);
			if(!Object.prototype.hasOwnProperty.call(this.blocks.h,fileName)) {
				var _this = this.blocks;
				var value = new ast_BlockNode(null);
				_this.h[fileName] = value;
			}
			this.currentBlock = this.blocks.h[fileName];
			if(lastFileName != fileName) {
				this.currentBlock.addNode(new ast_ImportNode(haxe_io_Path.withoutExtension(lastFileName)));
				lastFileName = fileName;
			}
			this.handleInstruction();
		}
	}
	,decompileToString: function() {
		while(this.pc < this.instructions.length) this.handleInstruction();
		return this.currentBlock.toString();
	}
	,getInt32: function() {
		var value = this.instructions.getInt32(this.pc);
		this.pc += 4;
		return value;
	}
	,handleInstruction: function() {
		this.opCode = this.instructions.b[this.pc];
		this.pc++;
		switch(this.opCode) {
		case 0:
			var constantIndex = this.getInt32();
			var constant;
			var _g = this.constantPool[constantIndex];
			switch(_g._hx_index) {
			case 0:
				var value = _g.value;
				constant = new ast_datatypes_NumberNode(value);
				break;
			case 1:
				var value = _g.value;
				constant = new ast_datatypes_StringNode(value);
				break;
			case 2:
				var position = _g.position;
				var parametersCount = _g.parametersCount;
				this.pc = position;
				var oStackSize = Lambda.count(this.stack);
				var jumpIndex = this.instructions.getInt32(this.pc - 4);
				var body = new ast_BlockNode(this.currentBlock);
				this.currentBlock = body;
				var parameters = [];
				while(this.pc < jumpIndex) switch(this.instructions.b[this.pc]) {
				case 25:
					if(parameters.length < parametersCount) {
						this.pc++;
						var index = this.getInt32();
						var name = this.variableTable.resolveVariableName(index);
						parameters.push(new ast_IdentNode(name));
					} else {
						this.handleInstruction();
					}
					break;
				case 28:
					if(jumpIndex - this.pc == 1 && Lambda.count(this.stack) <= oStackSize) {
						this.pc++;
					} else if(Lambda.count(this.stack) <= oStackSize) {
						var _this = this.stack;
						_this.head = new haxe_ds_GenericCell(new ast_datatypes_NullNode(),_this.head);
						this.handleInstruction();
					} else {
						this.handleInstruction();
					}
					break;
				default:
					this.handleInstruction();
				}
				this.currentBlock = body.parent;
				constant = new ast_datatypes_FunctionNode(body,parameters);
				break;
			case 3:
				constant = new ast_datatypes_NullNode();
				break;
			case 4:
				var value = _g.value;
				constant = new ast_datatypes_BooleanNode(value);
				break;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(constant,_this.head);
			break;
		case 1:
			var _this = this.stack;
			var k = _this.head;
			var expression;
			if(k == null) {
				expression = null;
			} else {
				_this.head = k.next;
				expression = k.elt;
			}
			this.currentBlock.addNode(new ast_StatementNode(expression));
			break;
		case 2:
			var jumpPos = this.getInt32();
			if(jumpPos < this.pc) {
				this.currentBlock.addNode(new ast_ContinueNode());
			} else {
				this.currentBlock.addNode(new ast_BreakNode());
			}
			break;
		case 3:
			var jumpIndex = this.getInt32();
			var _this = this.stack;
			var k = _this.head;
			var condition;
			if(k == null) {
				condition = null;
			} else {
				_this.head = k.next;
				condition = k.elt;
			}
			var block = new ast_BlockNode(this.currentBlock);
			var oStackSize = Lambda.count(this.stack);
			var putOnStack = false;
			this.currentBlock = block;
			while(this.pc < jumpIndex) if(jumpIndex - this.pc == 5 && this.instructions.b[this.pc] == 2) {
				this.pc++;
				var jumpIndex1 = this.getInt32();
				if(jumpIndex1 >= this.pc) {
					if(oStackSize < Lambda.count(this.stack)) {
						var _this = this.stack;
						var k = _this.head;
						var tmp;
						if(k == null) {
							tmp = null;
						} else {
							_this.head = k.next;
							tmp = k.elt;
						}
						this.currentBlock.addNode(tmp);
						putOnStack = true;
					}
					var oBlock = this.currentBlock;
					var alternative = new ast_BlockNode(this.currentBlock.parent);
					this.currentBlock = alternative;
					while(this.pc < jumpIndex1) this.handleInstruction();
					if(oStackSize < Lambda.count(this.stack)) {
						var _this1 = this.stack;
						var k1 = _this1.head;
						var tmp1;
						if(k1 == null) {
							tmp1 = null;
						} else {
							_this1.head = k1.next;
							tmp1 = k1.elt;
						}
						this.currentBlock.addNode(tmp1);
						putOnStack = true;
					}
					this.currentBlock = oBlock;
					this.currentBlock = block.parent;
					if(putOnStack) {
						var _this2 = this.stack;
						_this2.head = new haxe_ds_GenericCell(new ast_IfNode(condition,block,alternative),_this2.head);
					} else {
						this.currentBlock.addNode(new ast_IfNode(condition,block,alternative));
					}
				} else {
					if(oStackSize < Lambda.count(this.stack)) {
						var _this3 = this.stack;
						var k2 = _this3.head;
						var tmp2;
						if(k2 == null) {
							tmp2 = null;
						} else {
							_this3.head = k2.next;
							tmp2 = k2.elt;
						}
						this.currentBlock.addNode(tmp2);
						putOnStack = true;
					}
					this.currentBlock = block.parent;
					if(putOnStack) {
						var _this4 = this.stack;
						_this4.head = new haxe_ds_GenericCell(new ast_WhileNode(condition,block),_this4.head);
					} else {
						this.currentBlock.addNode(new ast_WhileNode(condition,block));
					}
				}
			} else {
				this.handleInstruction();
			}
			break;
		case 4:
			var jumpIndex = this.getInt32();
			this.pc++;
			while(this.pc != jumpIndex) this.handleInstruction();
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_OrNode(left,right),_this.head);
			break;
		case 5:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_AddNode(left,right),_this.head);
			break;
		case 6:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_SubtractNode(left,right),_this.head);
			break;
		case 7:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_MultiplyNode(left,right),_this.head);
			break;
		case 8:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_DivideNode(left,right),_this.head);
			break;
		case 9:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_BitAndNode(left,right),_this.head);
			break;
		case 10:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_BitOrNode(left,right),_this.head);
			break;
		case 11:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_BitXorNode(left,right),_this.head);
			break;
		case 12:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_BitShiftLeftNode(left,right),_this.head);
			break;
		case 13:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_BitShiftRightNode(left,right),_this.head);
			break;
		case 14:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_BitNotNode(right),_this.head);
			break;
		case 15:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_ModuloNode(left,right),_this.head);
			break;
		case 16:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_EqualsNode(left,right),_this.head);
			break;
		case 17:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_LessThanNode(left,right),_this.head);
			break;
		case 18:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_LessThanOrEqualNode(left,right),_this.head);
			break;
		case 19:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_GreaterThanNode(left,right),_this.head);
			break;
		case 20:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_GreaterThanOrEqualNode(left,right),_this.head);
			break;
		case 21:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_NegateNode(right),_this.head);
			break;
		case 22:
			if(this.instructions.b[this.pc] == 4) {
				this.pc++;
				var jumpIndex = this.getInt32();
				this.pc++;
				while(this.pc != jumpIndex - 5) this.handleInstruction();
				this.pc += 6;
				var _this = this.stack;
				var k = _this.head;
				var right;
				if(k == null) {
					right = null;
				} else {
					_this.head = k.next;
					right = k.elt;
				}
				var _this = this.stack;
				var k = _this.head;
				var left;
				if(k == null) {
					left = null;
				} else {
					_this.head = k.next;
					left = k.elt;
				}
				var _this = this.stack;
				_this.head = new haxe_ds_GenericCell(new ast_operators_AndNode(left,right),_this.head);
			} else {
				var _this = this.stack;
				var k = _this.head;
				var right;
				if(k == null) {
					right = null;
				} else {
					_this.head = k.next;
					right = k.elt;
				}
				var _this = this.stack;
				_this.head = new haxe_ds_GenericCell(new ast_operators_NotNode(right),_this.head);
			}
			break;
		case 23:
			var _this = this.stack;
			var k = _this.head;
			var right;
			if(k == null) {
				right = null;
			} else {
				_this.head = k.next;
				right = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var left;
			if(k == null) {
				left = null;
			} else {
				_this.head = k.next;
				left = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_operators_ConcatStringNode(left,right),_this.head);
			break;
		case 24:
			var index = this.getInt32();
			var name = this.variableTable.resolveVariableName(index);
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_IdentNode(name),_this.head);
			break;
		case 25:
			var index = this.getInt32();
			var _this = this.stack;
			var k = _this.head;
			var expression;
			if(k == null) {
				expression = null;
			} else {
				_this.head = k.next;
				expression = k.elt;
			}
			var name = this.variableTable.resolveVariableName(index);
			if(this.declaredVariables.indexOf(index) == -1) {
				this.declaredVariables.push(index);
				this.currentBlock.addNode(new ast_VariableNode(name,expression));
			} else {
				this.currentBlock.addNode(new ast_VariableAssignNode(name,expression));
			}
			break;
		case 26:
			var builtInIndex = this.getInt32();
			var name = std_BuiltInTable.resolveName(builtInIndex);
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_IdentNode(name),_this.head);
			break;
		case 27:
			var callParametersCount = this.getInt32();
			var _this = this.stack;
			var k = _this.head;
			var object;
			if(k == null) {
				object = null;
			} else {
				_this.head = k.next;
				object = k.elt;
			}
			var parameters = [];
			var _g = 0;
			var _g1 = callParametersCount;
			while(_g < _g1) {
				var _ = _g++;
				var _this = this.stack;
				var k = _this.head;
				var tmp;
				if(k == null) {
					tmp = null;
				} else {
					_this.head = k.next;
					tmp = k.elt;
				}
				parameters.push(tmp);
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_CallNode(object,parameters),_this.head);
			break;
		case 28:
			var _this = this.stack;
			var k = _this.head;
			var returnValue;
			if(k == null) {
				returnValue = null;
			} else {
				_this.head = k.next;
				returnValue = k.elt;
			}
			this.currentBlock.addNode(new ast_ReturnNode(returnValue));
			break;
		case 29:
			var arrayLength = this.getInt32();
			var arrayValues = [];
			var _g = 0;
			var _g1 = arrayLength;
			while(_g < _g1) {
				var _ = _g++;
				var _this = this.stack;
				var k = _this.head;
				var tmp;
				if(k == null) {
					tmp = null;
				} else {
					_this.head = k.next;
					tmp = k.elt;
				}
				arrayValues.unshift(tmp);
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_datatypes_ArrayNode(arrayValues),_this.head);
			break;
		case 30:
			var hashLength = this.getInt32();
			var hashValues = new haxe_ds_ObjectMap();
			var _g = 0;
			var _g1 = hashLength;
			while(_g < _g1) {
				var _ = _g++;
				var _this = this.stack;
				var k = _this.head;
				var value;
				if(k == null) {
					value = null;
				} else {
					_this.head = k.next;
					value = k.elt;
				}
				var _this1 = this.stack;
				var k1 = _this1.head;
				var key;
				if(k1 == null) {
					key = null;
				} else {
					_this1.head = k1.next;
					key = k1.elt;
				}
				hashValues.set(key,value);
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_datatypes_HashNode(hashValues),_this.head);
			break;
		case 31:
			var _this = this.stack;
			var k = _this.head;
			var index;
			if(k == null) {
				index = null;
			} else {
				_this.head = k.next;
				index = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var target;
			if(k == null) {
				target = null;
			} else {
				_this.head = k.next;
				target = k.elt;
			}
			var _this = this.stack;
			_this.head = new haxe_ds_GenericCell(new ast_IndexNode(target,index),_this.head);
			break;
		case 32:
			var _this = this.stack;
			var k = _this.head;
			var value;
			if(k == null) {
				value = null;
			} else {
				_this.head = k.next;
				value = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var index;
			if(k == null) {
				index = null;
			} else {
				_this.head = k.next;
				index = k.elt;
			}
			var _this = this.stack;
			var k = _this.head;
			var target;
			if(k == null) {
				target = null;
			} else {
				_this.head = k.next;
				target = k.elt;
			}
			this.currentBlock.addNode(new ast_IndexAssignNode(target,index,value));
			break;
		case 33:
			var _this = this.stack;
			var _this1 = this.stack;
			_this.head = new haxe_ds_GenericCell(_this1.head == null ? null : _this1.head.elt,_this.head);
			break;
		}
	}
	,__class__: decompiler_Decompiler
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = true;
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = true;
haxe_ds_GenericStack.prototype = {
	iterator: function() {
		var l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			var k = l;
			l = k.next;
			return k.elt;
		}};
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = true;
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return total.getBytes();
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var object_Object = $hxEnums["object.Object"] = { __ename__:true,__constructs__:null
	,Number: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Number",$_.__params__ = ["value"],$_)
	,String: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"object.Object",toString:$estr}; },$_._hx_name="String",$_.__params__ = ["value"],$_)
	,Function: ($_=function(position,parametersCount) { return {_hx_index:2,position:position,parametersCount:parametersCount,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Function",$_.__params__ = ["position","parametersCount"],$_)
	,Null: {_hx_name:"Null",_hx_index:3,__enum__:"object.Object",toString:$estr}
	,Boolean: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Boolean",$_.__params__ = ["value"],$_)
};
object_Object.__constructs__ = [object_Object.Number,object_Object.String,object_Object.Function,object_Object.Null,object_Object.Boolean];
var std_BuiltInTable = function() { };
std_BuiltInTable.__name__ = true;
std_BuiltInTable.resolveName = function(index) {
	return std_BuiltInTable.namespaces[index];
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
code_Keyword.keywords = ["func","let","mut","true","false","if","else","while","return","import","break","continue","null","for","in","when"];
code_OpCode.Constant = 0;
code_OpCode.Pop = 1;
code_OpCode.Jump = 2;
code_OpCode.JumpNot = 3;
code_OpCode.JumpPeek = 4;
code_OpCode.Add = 5;
code_OpCode.Subtract = 6;
code_OpCode.Multiply = 7;
code_OpCode.Divide = 8;
code_OpCode.BitAnd = 9;
code_OpCode.BitOr = 10;
code_OpCode.BitXor = 11;
code_OpCode.BitShiftLeft = 12;
code_OpCode.BitShiftRight = 13;
code_OpCode.BitNot = 14;
code_OpCode.Modulo = 15;
code_OpCode.Equals = 16;
code_OpCode.LessThan = 17;
code_OpCode.LessThanOrEqual = 18;
code_OpCode.GreaterThan = 19;
code_OpCode.GreaterThanOrEqual = 20;
code_OpCode.Negate = 21;
code_OpCode.Not = 22;
code_OpCode.ConcatString = 23;
code_OpCode.Load = 24;
code_OpCode.Store = 25;
code_OpCode.LoadBuiltIn = 26;
code_OpCode.Call = 27;
code_OpCode.Return = 28;
code_OpCode.Array = 29;
code_OpCode.Hash = 30;
code_OpCode.LoadIndex = 31;
code_OpCode.StoreIndex = 32;
code_OpCode.Duplicate = 33;
constant_ConstantType.Float = 0;
constant_ConstantType.String = 1;
constant_ConstantType.UserFunction = 2;
constant_ConstantType.Null = 3;
constant_ConstantType.Boolean = 4;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
std_BuiltInTable.namespaces = ["Sys","Math","Number","Object","Range","Regex","Json","Io","String","File","Http","Thread","Net"];
SnekkyDecompiler.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
