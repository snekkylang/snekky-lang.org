// Generated by Haxe 4.2.0
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var SnekkyP = $hx_exports["SnekkyP"] = function() { };
SnekkyP.__name__ = true;
SnekkyP.disassemble = function(byteCode,debug) {
	var parser = new parser_Parser(byteCode,debug);
	parser.parse();
};
SnekkyP.main = function() {
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	toString: function() {
		return this.b;
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
var code_OpCode = function() { };
code_OpCode.__name__ = true;
var code_constant_ConstantPool = function() { };
code_constant_ConstantPool.__name__ = true;
code_constant_ConstantPool.fromByteCode = function(byteCode) {
	var pool = [];
	var poolSize = byteCode.readInt32();
	var startPosition = byteCode.pos;
	while(byteCode.pos < startPosition + poolSize) {
		var type = byteCode.readByte();
		switch(type) {
		case 0:
			var value = byteCode.readDouble();
			pool.push(object_Object.Number(value));
			break;
		case 1:
			var length = byteCode.readInt32();
			var value1 = byteCode.readString(length);
			pool.push(object_Object.String(value1));
			break;
		case 2:
			var position = byteCode.readInt32();
			var parametersCount = byteCode.readInt16();
			pool.push(object_Object.UserFunction(position,parametersCount));
			break;
		case 3:
			pool.push(object_Object.Null);
			break;
		case 4:
			var value2 = byteCode.readByte();
			pool.push(object_Object.Boolean(value2 != 0));
			break;
		default:
		}
	}
	return pool;
};
var code_constant_ConstantType = function() { };
code_constant_ConstantType.__name__ = true;
var code_debug_FilenameTable = function() {
	this.table = [];
};
code_debug_FilenameTable.__name__ = true;
code_debug_FilenameTable.prototype = {
	define: function(start,end,filename) {
		this.table.push({ start : start, end : end, filename : filename});
	}
	,resolve: function(byteIndex) {
		var prev = null;
		var _g = 0;
		var _g1 = this.table;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.start <= byteIndex && entry.end >= byteIndex) {
				if(prev == null) {
					prev = entry;
					continue;
				}
				if(entry.start >= prev.start && entry.end <= prev.end) {
					prev = entry;
				}
			}
		}
		if(prev == null) {
			return null;
		} else {
			return prev.filename;
		}
	}
	,fromByteCode: function(byteCode) {
		var tableSize = byteCode.readInt32();
		var startPosition = byteCode.pos;
		while(byteCode.pos < startPosition + tableSize) {
			var start = byteCode.readInt32();
			var end = byteCode.readInt32();
			var filenameLength = byteCode.readInt32();
			var filename = byteCode.readString(filenameLength);
			this.table.push({ start : start, end : end, filename : filename});
		}
		return this;
	}
};
var code_debug_LineNumberTable = function() {
	this.table = new haxe_ds_IntMap();
};
code_debug_LineNumberTable.__name__ = true;
code_debug_LineNumberTable.prototype = {
	define: function(byteIndex,sourcePosition) {
		this.table.h[byteIndex] = sourcePosition;
	}
	,resolve: function(byteIndex) {
		if(byteIndex < 0) {
			return null;
		}
		var position = this.table.h[byteIndex];
		if(position != null) {
			return position;
		} else {
			return this.resolve(byteIndex - 1);
		}
	}
	,fromByteCode: function(byteCode) {
		var tableSize = byteCode.readInt32();
		var startPosition = byteCode.pos;
		while(byteCode.pos < startPosition + tableSize) {
			var byteIndex = byteCode.readInt32();
			var line = byteCode.readInt32();
			var linePos = byteCode.readInt32();
			this.table.h[byteIndex] = { line : line, linePos : linePos};
		}
		return this;
	}
};
var code_debug_VariableTable = function() {
	this.table = [];
};
code_debug_VariableTable.__name__ = true;
code_debug_VariableTable.prototype = {
	resolveIndex: function(index) {
		var _g = 0;
		var _g1 = this.table;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.index == index) {
				return entry.name;
			}
		}
		return "var" + index;
	}
	,fromByteCode: function(byteCode) {
		var tableSize = byteCode.readInt32();
		var startPosition = byteCode.pos;
		while(byteCode.pos < startPosition + tableSize) {
			var index = byteCode.readInt32();
			var start = byteCode.readInt32();
			var end = byteCode.readInt32();
			var nameLength = byteCode.readInt32();
			var name = byteCode.readString(nameLength);
			this.table.push({ index : index, start : start, end : end, name : name});
		}
		return this;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
var haxe_ds_StringMap = function() { };
haxe_ds_StringMap.__name__ = true;
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return total.getBytes();
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var instruction_Instruction = function(mnemonic,bytePosition) {
	this.mnemonic = mnemonic;
	this.bytePosition = bytePosition;
};
instruction_Instruction.__name__ = true;
instruction_Instruction.prototype = {
	toString: function() {
		return "" + this.mnemonic;
	}
};
var instruction_AddIns = function(bytePosition) {
	instruction_Instruction.call(this,"Add",bytePosition);
};
instruction_AddIns.__name__ = true;
instruction_AddIns.__super__ = instruction_Instruction;
instruction_AddIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_ArrayIns = function(size,bytePosition) {
	instruction_Instruction.call(this,"Array",bytePosition);
	this.size = size;
};
instruction_ArrayIns.__name__ = true;
instruction_ArrayIns.__super__ = instruction_Instruction;
instruction_ArrayIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {size: " + this.size + "}";
	}
});
var instruction_BitAndIns = function(bytePosition) {
	instruction_Instruction.call(this,"BitAnd",bytePosition);
};
instruction_BitAndIns.__name__ = true;
instruction_BitAndIns.__super__ = instruction_Instruction;
instruction_BitAndIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_BitNotIns = function(bytePosition) {
	instruction_Instruction.call(this,"BitNot",bytePosition);
};
instruction_BitNotIns.__name__ = true;
instruction_BitNotIns.__super__ = instruction_Instruction;
instruction_BitNotIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_BitOrIns = function(bytePosition) {
	instruction_Instruction.call(this,"BitOr",bytePosition);
};
instruction_BitOrIns.__name__ = true;
instruction_BitOrIns.__super__ = instruction_Instruction;
instruction_BitOrIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_BitShiftLeftIns = function(bytePosition) {
	instruction_Instruction.call(this,"BitShiftLeft",bytePosition);
};
instruction_BitShiftLeftIns.__name__ = true;
instruction_BitShiftLeftIns.__super__ = instruction_Instruction;
instruction_BitShiftLeftIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_BitShiftRightIns = function(bytePosition) {
	instruction_Instruction.call(this,"BitShiftRight",bytePosition);
};
instruction_BitShiftRightIns.__name__ = true;
instruction_BitShiftRightIns.__super__ = instruction_Instruction;
instruction_BitShiftRightIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_BitXorIns = function(bytePosition) {
	instruction_Instruction.call(this,"BitXor",bytePosition);
};
instruction_BitXorIns.__name__ = true;
instruction_BitXorIns.__super__ = instruction_Instruction;
instruction_BitXorIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_CallIns = function(parametersCount,bytePosition) {
	instruction_Instruction.call(this,"Call",bytePosition);
	this.parametersCount = parametersCount;
};
instruction_CallIns.__name__ = true;
instruction_CallIns.__super__ = instruction_Instruction;
instruction_CallIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {parametersCount: " + this.parametersCount + "}";
	}
});
var instruction_ConcatStringIns = function(bytePosition) {
	instruction_Instruction.call(this,"ConcatString",bytePosition);
};
instruction_ConcatStringIns.__name__ = true;
instruction_ConcatStringIns.__super__ = instruction_Instruction;
instruction_ConcatStringIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_ConstantIns = function(index,value,bytePosition) {
	instruction_Instruction.call(this,"Constant",bytePosition);
	this.index = index;
	this.value = value;
};
instruction_ConstantIns.__name__ = true;
instruction_ConstantIns.__super__ = instruction_Instruction;
instruction_ConstantIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + ", value: " + Std.string(this.value) + "}";
	}
});
var instruction_DivideIns = function(byteIndex) {
	instruction_Instruction.call(this,"Divide",byteIndex);
};
instruction_DivideIns.__name__ = true;
instruction_DivideIns.__super__ = instruction_Instruction;
instruction_DivideIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_EqualsIns = function(byteIndex) {
	instruction_Instruction.call(this,"Equals",byteIndex);
};
instruction_EqualsIns.__name__ = true;
instruction_EqualsIns.__super__ = instruction_Instruction;
instruction_EqualsIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_GreaterThanIns = function(byteIndex) {
	instruction_Instruction.call(this,"GreaterThan",byteIndex);
};
instruction_GreaterThanIns.__name__ = true;
instruction_GreaterThanIns.__super__ = instruction_Instruction;
instruction_GreaterThanIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_GreaterThanOrEqualIns = function(byteIndex) {
	instruction_Instruction.call(this,"GreaterThanOrEqual",byteIndex);
};
instruction_GreaterThanOrEqualIns.__name__ = true;
instruction_GreaterThanOrEqualIns.__super__ = instruction_Instruction;
instruction_GreaterThanOrEqualIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_HashIns = function(size,byteIndex) {
	instruction_Instruction.call(this,"Hash",byteIndex);
	this.size = size;
};
instruction_HashIns.__name__ = true;
instruction_HashIns.__super__ = instruction_Instruction;
instruction_HashIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {size: " + this.size + "}";
	}
});
var instruction_JumpIns = function(index,byteIndex) {
	instruction_Instruction.call(this,"Jump",byteIndex);
	this.index = index;
};
instruction_JumpIns.__name__ = true;
instruction_JumpIns.__super__ = instruction_Instruction;
instruction_JumpIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + "}";
	}
});
var instruction_JumpNotIns = function(index,byteIndex) {
	instruction_Instruction.call(this,"JumpNot",byteIndex);
	this.index = index;
};
instruction_JumpNotIns.__name__ = true;
instruction_JumpNotIns.__super__ = instruction_Instruction;
instruction_JumpNotIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + "}";
	}
});
var instruction_JumpPeekIns = function(index,byteIndex) {
	instruction_Instruction.call(this,"JumpPeek",byteIndex);
	this.index = index;
};
instruction_JumpPeekIns.__name__ = true;
instruction_JumpPeekIns.__super__ = instruction_Instruction;
instruction_JumpPeekIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + "}";
	}
});
var instruction_LessThanIns = function(byteIndex) {
	instruction_Instruction.call(this,"LessThan",byteIndex);
};
instruction_LessThanIns.__name__ = true;
instruction_LessThanIns.__super__ = instruction_Instruction;
instruction_LessThanIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_LessThanOrEqualIns = function(byteIndex) {
	instruction_Instruction.call(this,"LessThanOrEqual",byteIndex);
};
instruction_LessThanOrEqualIns.__name__ = true;
instruction_LessThanOrEqualIns.__super__ = instruction_Instruction;
instruction_LessThanOrEqualIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_LoadBuiltInIns = function(index,name,byteIndex) {
	instruction_Instruction.call(this,"LoadBuiltIn",byteIndex);
	this.index = index;
	this.name = name;
};
instruction_LoadBuiltInIns.__name__ = true;
instruction_LoadBuiltInIns.__super__ = instruction_Instruction;
instruction_LoadBuiltInIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + ", name: " + this.name + "}";
	}
});
var instruction_LoadIndexIns = function(byteIndex) {
	instruction_Instruction.call(this,"LoadIndex",byteIndex);
};
instruction_LoadIndexIns.__name__ = true;
instruction_LoadIndexIns.__super__ = instruction_Instruction;
instruction_LoadIndexIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_LoadIns = function(index,name,byteIndex) {
	instruction_Instruction.call(this,"Load",byteIndex);
	this.index = index;
	this.name = name;
};
instruction_LoadIns.__name__ = true;
instruction_LoadIns.__super__ = instruction_Instruction;
instruction_LoadIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + ", name: " + this.name + "}";
	}
});
var instruction_ModuloIns = function(byteIndex) {
	instruction_Instruction.call(this,"Modulo",byteIndex);
};
instruction_ModuloIns.__name__ = true;
instruction_ModuloIns.__super__ = instruction_Instruction;
instruction_ModuloIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_MultiplyIns = function(byteIndex) {
	instruction_Instruction.call(this,"Multiply",byteIndex);
};
instruction_MultiplyIns.__name__ = true;
instruction_MultiplyIns.__super__ = instruction_Instruction;
instruction_MultiplyIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_NegateIns = function(byteIndex) {
	instruction_Instruction.call(this,"Negate",byteIndex);
};
instruction_NegateIns.__name__ = true;
instruction_NegateIns.__super__ = instruction_Instruction;
instruction_NegateIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_NotIns = function(byteIndex) {
	instruction_Instruction.call(this,"Not",byteIndex);
};
instruction_NotIns.__name__ = true;
instruction_NotIns.__super__ = instruction_Instruction;
instruction_NotIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_PopIns = function(byteIndex) {
	instruction_Instruction.call(this,"Pop",byteIndex);
};
instruction_PopIns.__name__ = true;
instruction_PopIns.__super__ = instruction_Instruction;
instruction_PopIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_ReturnIns = function(byteIndex) {
	instruction_Instruction.call(this,"Return",byteIndex);
};
instruction_ReturnIns.__name__ = true;
instruction_ReturnIns.__super__ = instruction_Instruction;
instruction_ReturnIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_StoreIndexIns = function(byteIndex) {
	instruction_Instruction.call(this,"StoreIndex",byteIndex);
};
instruction_StoreIndexIns.__name__ = true;
instruction_StoreIndexIns.__super__ = instruction_Instruction;
instruction_StoreIndexIns.prototype = $extend(instruction_Instruction.prototype,{
});
var instruction_StoreIns = function(index,name,byteIndex) {
	instruction_Instruction.call(this,"Store",byteIndex);
	this.index = index;
	this.name = name;
};
instruction_StoreIns.__name__ = true;
instruction_StoreIns.__super__ = instruction_Instruction;
instruction_StoreIns.prototype = $extend(instruction_Instruction.prototype,{
	toString: function() {
		return "" + this.mnemonic + " {index: " + this.index + ", name: " + this.name + "}";
	}
});
var instruction_SubtractIns = function(byteIndex) {
	instruction_Instruction.call(this,"Subtract",byteIndex);
};
instruction_SubtractIns.__name__ = true;
instruction_SubtractIns.__super__ = instruction_Instruction;
instruction_SubtractIns.prototype = $extend(instruction_Instruction.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var object_Object = $hxEnums["object.Object"] = { __ename__:true,__constructs__:null
	,Number: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Number",$_.__params__ = ["value"],$_)
	,String: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"object.Object",toString:$estr}; },$_._hx_name="String",$_.__params__ = ["value"],$_)
	,UserFunction: ($_=function(position,parametersCount) { return {_hx_index:2,position:position,parametersCount:parametersCount,__enum__:"object.Object",toString:$estr}; },$_._hx_name="UserFunction",$_.__params__ = ["position","parametersCount"],$_)
	,BuiltInFunction: ($_=function(memberFunction,parametersCount) { return {_hx_index:3,memberFunction:memberFunction,parametersCount:parametersCount,__enum__:"object.Object",toString:$estr}; },$_._hx_name="BuiltInFunction",$_.__params__ = ["memberFunction","parametersCount"],$_)
	,Array: ($_=function(values) { return {_hx_index:4,values:values,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Array",$_.__params__ = ["values"],$_)
	,Hash: ($_=function(values) { return {_hx_index:5,values:values,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Hash",$_.__params__ = ["values"],$_)
	,Null: {_hx_name:"Null",_hx_index:6,__enum__:"object.Object",toString:$estr}
	,Boolean: ($_=function(value) { return {_hx_index:7,value:value,__enum__:"object.Object",toString:$estr}; },$_._hx_name="Boolean",$_.__params__ = ["value"],$_)
};
object_Object.__constructs__ = [object_Object.Number,object_Object.String,object_Object.UserFunction,object_Object.BuiltInFunction,object_Object.Array,object_Object.Hash,object_Object.Null,object_Object.Boolean];
var parser_Parser = function(fileData,debug) {
	this.fileInfo = [];
	this.parsedInstructions = [];
	var fileData1 = new haxe_io_BytesInput(fileData);
	var byteCode = fileData1.readByte() == 1 ? new haxe_io_BytesInput(haxe_zip_Uncompress.run(fileData1.readAll())) : new haxe_io_BytesInput(fileData1.readAll());
	this.filenameTable = new code_debug_FilenameTable().fromByteCode(byteCode);
	this.lineNumberTable = new code_debug_LineNumberTable().fromByteCode(byteCode);
	this.variableTable = new code_debug_VariableTable().fromByteCode(byteCode);
	this.constantPool = code_constant_ConstantPool.fromByteCode(byteCode);
	this.instructions = new haxe_io_BytesInput(byteCode.read(byteCode.readInt32()));
	this.debug = debug;
};
parser_Parser.__name__ = true;
parser_Parser.prototype = {
	parse: function() {
		while(this.instructions.pos < this.instructions.totlen) this.parseInstruction();
		var insCountMaxLength = Std.string(this.parsedInstructions.length).length;
		var posCountMaxLength = Std.string(this.instructions.totlen).length;
		var fileInfoMaxLength = 0;
		var _g = 0;
		var _g1 = this.fileInfo;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.length > fileInfoMaxLength) {
				fileInfoMaxLength = s.length;
			}
		}
		var _g2_current = 0;
		var _g2_array = this.parsedInstructions;
		while(_g2_current < _g2_array.length) {
			var _g3_value = _g2_array[_g2_current];
			var _g3_key = _g2_current++;
			var i = _g3_key;
			var ins = _g3_value;
			var insCount = StringTools.lpad(i == null ? "null" : "" + i,"0",insCountMaxLength);
			var info = new StringBuf();
			info.b += insCount == null ? "null" : "" + insCount;
			info.b += " | ";
			var x = StringTools.lpad(ins.bytePosition == null ? "null" : "" + ins.bytePosition,"0",posCountMaxLength);
			info.b += Std.string(x);
			info.b += " | ";
			if(this.debug) {
				var x1 = StringTools.rpad(this.fileInfo[i]," ",fileInfoMaxLength);
				info.b += Std.string(x1);
				info.b += " | ";
			}
			var message = "" + Std.string(info) + Std.string(ins);
			$global.console.log(message);
		}
	}
	,println: function(message) {
		$global.console.log(message);
	}
	,parseInstruction: function() {
		var position = this.instructions.pos;
		var opCode = this.instructions.readByte();
		if(this.debug) {
			var position1 = this.lineNumberTable.resolve(this.instructions.pos);
			var filename = this.filenameTable.resolve(this.instructions.pos);
			this.fileInfo.push("" + filename + ":" + position1.line + ":" + (position1.linePos + 1));
		}
		var instruction;
		switch(opCode) {
		case 0:
			var index = this.instructions.readInt32();
			var value = this.constantPool[index];
			instruction = new instruction_ConstantIns(index,value,position);
			break;
		case 1:
			instruction = new instruction_PopIns(position);
			break;
		case 2:
			var index = this.instructions.readInt32();
			instruction = new instruction_JumpIns(index,position);
			break;
		case 3:
			var index = this.instructions.readInt32();
			instruction = new instruction_JumpNotIns(index,position);
			break;
		case 4:
			var index = this.instructions.readInt32();
			instruction = new instruction_JumpPeekIns(index,position);
			break;
		case 5:
			instruction = new instruction_AddIns(position);
			break;
		case 6:
			instruction = new instruction_SubtractIns(position);
			break;
		case 7:
			instruction = new instruction_MultiplyIns(position);
			break;
		case 8:
			instruction = new instruction_DivideIns(position);
			break;
		case 9:
			instruction = new instruction_BitAndIns(position);
			break;
		case 10:
			instruction = new instruction_BitOrIns(position);
			break;
		case 11:
			instruction = new instruction_BitXorIns(position);
			break;
		case 12:
			instruction = new instruction_BitShiftLeftIns(position);
			break;
		case 13:
			instruction = new instruction_BitShiftRightIns(position);
			break;
		case 14:
			instruction = new instruction_BitNotIns(position);
			break;
		case 15:
			instruction = new instruction_ModuloIns(position);
			break;
		case 16:
			instruction = new instruction_EqualsIns(position);
			break;
		case 17:
			instruction = new instruction_LessThanIns(position);
			break;
		case 18:
			instruction = new instruction_LessThanOrEqualIns(position);
			break;
		case 19:
			instruction = new instruction_GreaterThanIns(position);
			break;
		case 20:
			instruction = new instruction_GreaterThanOrEqualIns(position);
			break;
		case 21:
			instruction = new instruction_NegateIns(position);
			break;
		case 22:
			instruction = new instruction_NotIns(position);
			break;
		case 23:
			instruction = new instruction_ConcatStringIns(position);
			break;
		case 24:
			var index = this.instructions.readInt32();
			var name = this.variableTable.resolveIndex(index);
			instruction = new instruction_LoadIns(index,name,position);
			break;
		case 25:
			var index = this.instructions.readInt32();
			var name = this.variableTable.resolveIndex(index);
			instruction = new instruction_StoreIns(index,name,position);
			break;
		case 26:
			var index = this.instructions.readInt32();
			var name = std_BuiltInTable.resolveName(index);
			instruction = new instruction_LoadBuiltInIns(index,name,position);
			break;
		case 27:
			var parametersCount = this.instructions.readInt32();
			instruction = new instruction_CallIns(parametersCount,position);
			break;
		case 28:
			instruction = new instruction_ReturnIns(position);
			break;
		case 29:
			var size = this.instructions.readInt32();
			instruction = new instruction_ArrayIns(size,position);
			break;
		case 30:
			var size = this.instructions.readInt32();
			instruction = new instruction_HashIns(size,position);
			break;
		case 31:
			instruction = new instruction_LoadIndexIns(position);
			break;
		case 32:
			instruction = new instruction_StoreIndexIns(position);
			break;
		default:
			console.log("src/parser/Parser.hx:158:","Unknown OpCode `" + opCode + "`");
			instruction = new instruction_Instruction("unknown",position);
		}
		this.parsedInstructions.push(instruction);
	}
};
var std_BuiltInTable = function() { };
std_BuiltInTable.__name__ = true;
std_BuiltInTable.resolveName = function(index) {
	return std_BuiltInTable.namespaces[index];
};
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
code_OpCode.Constant = 0;
code_OpCode.Pop = 1;
code_OpCode.Jump = 2;
code_OpCode.JumpNot = 3;
code_OpCode.JumpPeek = 4;
code_OpCode.Add = 5;
code_OpCode.Subtract = 6;
code_OpCode.Multiply = 7;
code_OpCode.Divide = 8;
code_OpCode.BitAnd = 9;
code_OpCode.BitOr = 10;
code_OpCode.BitXor = 11;
code_OpCode.BitShiftLeft = 12;
code_OpCode.BitShiftRight = 13;
code_OpCode.BitNot = 14;
code_OpCode.Modulo = 15;
code_OpCode.Equals = 16;
code_OpCode.LessThan = 17;
code_OpCode.LessThanOrEqual = 18;
code_OpCode.GreaterThan = 19;
code_OpCode.GreaterThanOrEqual = 20;
code_OpCode.Negate = 21;
code_OpCode.Not = 22;
code_OpCode.ConcatString = 23;
code_OpCode.Load = 24;
code_OpCode.Store = 25;
code_OpCode.LoadBuiltIn = 26;
code_OpCode.Call = 27;
code_OpCode.Return = 28;
code_OpCode.Array = 29;
code_OpCode.Hash = 30;
code_OpCode.LoadIndex = 31;
code_OpCode.StoreIndex = 32;
code_constant_ConstantType.Float = 0;
code_constant_ConstantType.String = 1;
code_constant_ConstantType.UserFunction = 2;
code_constant_ConstantType.Null = 3;
code_constant_ConstantType.Boolean = 4;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
std_BuiltInTable.namespaces = ["Sys","Math","Number","Object","Range","Regex","Json","Io","String","File","Http","Thread","Net"];
SnekkyP.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
